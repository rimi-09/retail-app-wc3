// Global annotations
////
/// @group structure
/// @access private
////

$btn-link-hover-decoration: none !default;
$btn-icon-link-color: $color-neutral-darker !default;
$btn-icon-link-hover-background: $color-neutral-lighter !default;
$btn-icon-link-active-background: $color-neutral-light !default;
$btn-circle-sm-size: 2rem !default;
$btn-circle-md-size: 2.7rem !default;
$btn-link-text-light-background-color: rgba(255, 255, 255, 0) !default;
$btn-small-circle-font-size: 1.2rem !default;
$btn-small-circle-line-height: 1 !default;

@import "~bootstrap/scss/buttons";

.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: $font-weight-semi-bold;
  white-space: nowrap;

  i + span,
  span + i {
    margin-left: $btn-padding-x * 0.33;
  }

  &.btn-circle {
    padding: 0;

    &.btn-sm {
      width: $btn-circle-sm-size;
      height: $btn-circle-sm-size;

      .bb-icon,
      .bicon {
        font-size: $btn-small-circle-font-size;
        line-height: $btn-small-circle-line-height;
      }
    }

    &.btn-md {
      width: $btn-circle-md-size;
      height: $btn-circle-md-size;
    }
  }

  bb-icon-ui {
    &:last-child {
      .bb-icon--cropped {
        margin-left: $spacer-sm;
      }
    }

    &:first-child {
      .bb-icon--cropped {
        margin-right: $spacer-sm;
      }
    }
  }
}

// For each of Bootstrap's buttons, define text, background, and border color.
@each $color, $button-color-map in $theme-button-colors {
  .btn-#{$color} {
    /*
      We are passing the focus background and focus border as background to the mixin then manually overriding the border and background just after invoking the mixing.
      The reason for this is that the focus rules are harder to override than the border and background ones, and they are using the background and border color
     */
    @include button-variant(
      map-get($button-color-map, "focus-bg"),
      map-get($button-color-map, "focus-border"),
      map-get($button-color-map, "hover-bg"),
      map-get($button-color-map, "hover-border"),
      map-get($button-color-map, "active-bg"),
      map-get($button-color-map, "active-border")
    );

    @include gradient-bg(map-get($button-color-map, "default-bg"));
    border-color: map-get($button-color-map, "default-border");

    @if map-has-key($button-color-map, color) {
      color: map-get($button-color-map, color);
    }

    @if $color == "link" or $color == "link-dark" {
      border-color: transparent;
    }

    &.btn-circle {
      @if $color == "success" or $color == "danger" {
        @include gradient-bg(transparent);
        color: map-get($button-color-map, "default-border");
      }

      border-width: $border-width;

      @include hover {
        &:not(:disabled):not(.disabled) {
          color: $color-neutral-white;
        }
      }

      &:active,
      &.active,
      &:active:focus,
      &.active:focus {
        color: $color-neutral-white;
      }
    }

    &:disabled,
    &.disabled {
      color: $color-neutral-greyest;
      background-color: $color-neutral-lighter;
      border-color: $color-neutral-lighter;
      cursor: not-allowed;
    }

    &:not(:disabled):not(.disabled) {
      @include hover {
        background-color: map-get($button-color-map, "hover-bg");
        border-color: map-get($button-color-map, "hover-border");

        @if (map_has_key($button-color-map, "hover-color")) {
          $hover-color: map_get($button-color-map, "hover-color");

          color: $hover-color;

          .bicon,
          .bb-icon {
            color: $hover-color !important;
          }
        }
      }

      &:active,
      &.active,
      &:active:focus,
      &.active:focus {
        background-color: map-get($button-color-map, "active-bg");
        border-color: map-get($button-color-map, "active-border");
      }
    }
  }
}

.btn-link,
.btn-link-dark {
  opacity: 1;

  &:focus,
  &:hover {
    text-decoration: $btn-link-hover-decoration;
  }
}

.btn-link-text {
  @include button-variant(
    $btn-link-text-light-background-color,
    $btn-link-text-light-background-color,
    $btn-link-text-light-background-color,
    $btn-link-text-light-background-color,
    $btn-link-text-light-background-color,
    $btn-link-text-light-background-color
  );
  padding: 0;
  color: $color-primary;
  border: none;
  border-radius: 0;
  opacity: 1;

  &:focus,
  &.focus,
  &:hover,
  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active {
    // TODO: define box shadow when the global focus state is ready
    color: $color-primary-darkest;

    span {
      text-decoration: underline;
    }
  }

  &:hover {
    color: $color-primary-darker;
  }
}

.btn-link-text-light {
  @extend .btn-link-text;

  color: $color-neutral-white;

  &:focus,
  &.focus,
  &:hover,
  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active {
    // TODO: define box shadow when the global focus state is ready
    color: $color-neutral-white;
  }
}

.btn-icon-link {
  color: $btn-icon-link-color;

  &:not(.disabled):not(:disabled) {
    &:hover {
      color: $btn-icon-link-color;
      background-color: $btn-icon-link-hover-background;
    }

    &:active {
      color: $btn-icon-link-color;
      background-color: $btn-icon-link-active-background;
    }
  }

  &:focus,
  &:hover {
    text-decoration: none;
  }

  &:disabled,
  &.disabled {
    color: $color-neutral-greyest;
    background-color: $color-neutral-lighter;
    border-color: $color-neutral-lighter;
  }
}

.btn-unstyled {
  padding: 0 0;
  color: inherit;
  font-weight: normal;
  text-align: left;
  background: transparent;
  border: 0;
  border-radius: $border-radius-none;

  &:not(:disabled):not(.disabled) {
    @include hover {
      background-color: transparent;
    }

    &.active,
    &:active {
      background-color: transparent;
    }
  }
}

button,
[type="submit"],
[type="button"],
[type="reset"] {
  @include appearance-toggle();
}
